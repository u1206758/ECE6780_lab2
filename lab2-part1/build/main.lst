ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccXucmVD.s 			page 1


   1              		.cpu cortex-m0
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Src/main.c"
  18              		.section	.text.EXTI0_1_IRQHandler,"ax",%progbits
  19              		.align	1
  20              		.global	EXTI0_1_IRQHandler
  21              		.syntax unified
  22              		.code	16
  23              		.thumb_func
  25              	EXTI0_1_IRQHandler:
  26              	.LFB40:
   1:Src/main.c    **** /**
   2:Src/main.c    ****   *
   3:Src/main.c    ****   *
   4:Src/main.c    ****   *
   5:Src/main.c    ****   ******************************************************************************
   6:Src/main.c    ****   * File Name          : main.c
   7:Src/main.c    ****   * Description        : Main program body
   8:Src/main.c    ****   ******************************************************************************
   9:Src/main.c    ****   ** This notice applies to any and all portions of this file
  10:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
  11:Src/main.c    ****   * USER CODE END. Other portions of this file, whether
  12:Src/main.c    ****   * inserted by the user or by software development tools
  13:Src/main.c    ****   * are owned by their respective copyright owners.
  14:Src/main.c    ****   *
  15:Src/main.c    ****   * COPYRIGHT(c) 2018 STMicroelectronics
  16:Src/main.c    ****   *
  17:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without modification,
  18:Src/main.c    ****   * are permitted provided that the following conditions are met:
  19:Src/main.c    ****   *   1. Redistributions of source code must retain the above copyright notice,
  20:Src/main.c    ****   *      this list of conditions and the following disclaimer.
  21:Src/main.c    ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  22:Src/main.c    ****   *      this list of conditions and the following disclaimer in the documentation
  23:Src/main.c    ****   *      and/or other materials provided with the distribution.
  24:Src/main.c    ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  25:Src/main.c    ****   *      may be used to endorse or promote products derived from this software
  26:Src/main.c    ****   *      without specific prior written permission.
  27:Src/main.c    ****   *
  28:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  29:Src/main.c    ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  30:Src/main.c    ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  31:Src/main.c    ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  32:Src/main.c    ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccXucmVD.s 			page 2


  33:Src/main.c    ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  34:Src/main.c    ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  35:Src/main.c    ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  36:Src/main.c    ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  37:Src/main.c    ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  38:Src/main.c    ****   *
  39:Src/main.c    ****   ******************************************************************************
  40:Src/main.c    ****   */
  41:Src/main.c    **** 
  42:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  43:Src/main.c    **** #include "main.h"
  44:Src/main.c    **** #include "stm32f0xx_hal.h"
  45:Src/main.c    **** void _Error_Handler(char * file, int line);
  46:Src/main.c    **** 
  47:Src/main.c    **** /* USER CODE BEGIN Includes */
  48:Src/main.c    **** 
  49:Src/main.c    **** /* USER CODE END Includes */
  50:Src/main.c    **** 
  51:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  52:Src/main.c    **** 
  53:Src/main.c    **** /* USER CODE BEGIN PV */
  54:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  55:Src/main.c    **** 
  56:Src/main.c    **** /* USER CODE END PV */
  57:Src/main.c    **** 
  58:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  59:Src/main.c    **** void SystemClock_Config(void);
  60:Src/main.c    **** 
  61:Src/main.c    **** /* USER CODE BEGIN PFP */
  62:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  63:Src/main.c    **** 
  64:Src/main.c    **** /* USER CODE END PFP */
  65:Src/main.c    **** 
  66:Src/main.c    **** /* USER CODE BEGIN 0 */
  67:Src/main.c    **** 
  68:Src/main.c    **** /* USER CODE END 0 */
  69:Src/main.c    **** 
  70:Src/main.c    **** //EXTI0 Interrupt Handler
  71:Src/main.c    **** void EXTI0_1_IRQHandler(void)
  72:Src/main.c    **** {
  27              		.loc 1 72 1 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  73:Src/main.c    ****   //Toggle green and orange LEDs
  74:Src/main.c    ****   GPIOC->ODR ^= GPIO_ODR_8;
  32              		.loc 1 74 3 view .LVU1
  33              		.loc 1 74 8 is_stmt 0 view .LVU2
  34 0000 084B     		ldr	r3, .L2
  35 0002 5969     		ldr	r1, [r3, #20]
  36              		.loc 1 74 14 view .LVU3
  37 0004 8022     		movs	r2, #128
  38 0006 5200     		lsls	r2, r2, #1
  39 0008 4A40     		eors	r2, r1
  40 000a 5A61     		str	r2, [r3, #20]
  75:Src/main.c    ****   GPIOC->ODR ^= GPIO_ODR_9;
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccXucmVD.s 			page 3


  41              		.loc 1 75 3 is_stmt 1 view .LVU4
  42              		.loc 1 75 8 is_stmt 0 view .LVU5
  43 000c 5969     		ldr	r1, [r3, #20]
  44              		.loc 1 75 14 view .LVU6
  45 000e 8022     		movs	r2, #128
  46 0010 9200     		lsls	r2, r2, #2
  47 0012 4A40     		eors	r2, r1
  48 0014 5A61     		str	r2, [r3, #20]
  76:Src/main.c    ****   //Clear EXTI pending flag
  77:Src/main.c    ****   EXTI->PR |= EXTI_PR_PR0;
  49              		.loc 1 77 3 is_stmt 1 view .LVU7
  50              		.loc 1 77 7 is_stmt 0 view .LVU8
  51 0016 044A     		ldr	r2, .L2+4
  52 0018 5369     		ldr	r3, [r2, #20]
  53              		.loc 1 77 12 view .LVU9
  54 001a 0121     		movs	r1, #1
  55 001c 0B43     		orrs	r3, r1
  56 001e 5361     		str	r3, [r2, #20]
  78:Src/main.c    **** }
  57              		.loc 1 78 1 view .LVU10
  58              		@ sp needed
  59 0020 7047     		bx	lr
  60              	.L3:
  61 0022 C046     		.align	2
  62              	.L2:
  63 0024 00080048 		.word	1207961600
  64 0028 00040140 		.word	1073808384
  65              		.cfi_endproc
  66              	.LFE40:
  68              		.section	.text.init_leds,"ax",%progbits
  69              		.align	1
  70              		.global	init_leds
  71              		.syntax unified
  72              		.code	16
  73              		.thumb_func
  75              	init_leds:
  76              	.LFB41:
  79:Src/main.c    **** 
  80:Src/main.c    **** //Initialize all four LEDs
  81:Src/main.c    **** void init_leds(void)
  82:Src/main.c    **** {
  77              		.loc 1 82 1 is_stmt 1 view -0
  78              		.cfi_startproc
  79              		@ args = 0, pretend = 0, frame = 0
  80              		@ frame_needed = 0, uses_anonymous_args = 0
  81              		@ link register save eliminated.
  83:Src/main.c    ****   //Initialize red LED, PC6
  84:Src/main.c    ****   GPIOC->MODER |= GPIO_MODER_MODER6_0; //General purpose output
  82              		.loc 1 84 3 view .LVU12
  83              		.loc 1 84 8 is_stmt 0 view .LVU13
  84 0000 224B     		ldr	r3, .L5
  85 0002 1968     		ldr	r1, [r3]
  86              		.loc 1 84 16 view .LVU14
  87 0004 8022     		movs	r2, #128
  88 0006 5201     		lsls	r2, r2, #5
  89 0008 0A43     		orrs	r2, r1
  90 000a 1A60     		str	r2, [r3]
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccXucmVD.s 			page 4


  85:Src/main.c    ****   GPIOC->OTYPER &= ~GPIO_OTYPER_OT_6; // Push-pull
  91              		.loc 1 85 3 is_stmt 1 view .LVU15
  92              		.loc 1 85 8 is_stmt 0 view .LVU16
  93 000c 5A68     		ldr	r2, [r3, #4]
  94              		.loc 1 85 17 view .LVU17
  95 000e 4021     		movs	r1, #64
  96 0010 8A43     		bics	r2, r1
  97 0012 5A60     		str	r2, [r3, #4]
  86:Src/main.c    ****   GPIOC->OSPEEDR &= ~GPIO_OSPEEDR_OSPEEDR6_0; //Low speed
  98              		.loc 1 86 3 is_stmt 1 view .LVU18
  99              		.loc 1 86 8 is_stmt 0 view .LVU19
 100 0014 9A68     		ldr	r2, [r3, #8]
 101              		.loc 1 86 18 view .LVU20
 102 0016 1E49     		ldr	r1, .L5+4
 103 0018 0A40     		ands	r2, r1
 104 001a 9A60     		str	r2, [r3, #8]
  87:Src/main.c    ****   GPIOC->PUPDR &= ~(GPIO_PUPDR_PUPDR6_0 | GPIO_PUPDR_PUPDR6_1); //No pull up or down
 105              		.loc 1 87 3 is_stmt 1 view .LVU21
 106              		.loc 1 87 8 is_stmt 0 view .LVU22
 107 001c DA68     		ldr	r2, [r3, #12]
 108              		.loc 1 87 16 view .LVU23
 109 001e 1D49     		ldr	r1, .L5+8
 110 0020 0A40     		ands	r2, r1
 111 0022 DA60     		str	r2, [r3, #12]
  88:Src/main.c    **** 
  89:Src/main.c    ****   //Initialize blue LED, PC7
  90:Src/main.c    ****   GPIOC->MODER |= GPIO_MODER_MODER7_0; //General purpose output
 112              		.loc 1 90 3 is_stmt 1 view .LVU24
 113              		.loc 1 90 8 is_stmt 0 view .LVU25
 114 0024 1968     		ldr	r1, [r3]
 115              		.loc 1 90 16 view .LVU26
 116 0026 8022     		movs	r2, #128
 117 0028 D201     		lsls	r2, r2, #7
 118 002a 0A43     		orrs	r2, r1
 119 002c 1A60     		str	r2, [r3]
  91:Src/main.c    ****   GPIOC->OTYPER &= ~GPIO_OTYPER_OT_7; // Push-pull
 120              		.loc 1 91 3 is_stmt 1 view .LVU27
 121              		.loc 1 91 8 is_stmt 0 view .LVU28
 122 002e 5A68     		ldr	r2, [r3, #4]
 123              		.loc 1 91 17 view .LVU29
 124 0030 8021     		movs	r1, #128
 125 0032 8A43     		bics	r2, r1
 126 0034 5A60     		str	r2, [r3, #4]
  92:Src/main.c    ****   GPIOC->OSPEEDR &= ~GPIO_OSPEEDR_OSPEEDR7_0; //Low speed
 127              		.loc 1 92 3 is_stmt 1 view .LVU30
 128              		.loc 1 92 8 is_stmt 0 view .LVU31
 129 0036 9A68     		ldr	r2, [r3, #8]
 130              		.loc 1 92 18 view .LVU32
 131 0038 1749     		ldr	r1, .L5+12
 132 003a 0A40     		ands	r2, r1
 133 003c 9A60     		str	r2, [r3, #8]
  93:Src/main.c    ****   GPIOC->PUPDR &= ~(GPIO_PUPDR_PUPDR7_0 | GPIO_PUPDR_PUPDR7_1); //No pull up or down
 134              		.loc 1 93 3 is_stmt 1 view .LVU33
 135              		.loc 1 93 8 is_stmt 0 view .LVU34
 136 003e DA68     		ldr	r2, [r3, #12]
 137              		.loc 1 93 16 view .LVU35
 138 0040 1649     		ldr	r1, .L5+16
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccXucmVD.s 			page 5


 139 0042 0A40     		ands	r2, r1
 140 0044 DA60     		str	r2, [r3, #12]
  94:Src/main.c    **** 
  95:Src/main.c    ****   //Initialize orange LED, PC8
  96:Src/main.c    ****   GPIOC->MODER |= GPIO_MODER_MODER8_0; //General purpose output
 141              		.loc 1 96 3 is_stmt 1 view .LVU36
 142              		.loc 1 96 8 is_stmt 0 view .LVU37
 143 0046 1968     		ldr	r1, [r3]
 144              		.loc 1 96 16 view .LVU38
 145 0048 8022     		movs	r2, #128
 146 004a 5202     		lsls	r2, r2, #9
 147 004c 0A43     		orrs	r2, r1
 148 004e 1A60     		str	r2, [r3]
  97:Src/main.c    ****   GPIOC->OTYPER &= ~GPIO_OTYPER_OT_8; // Push-pull
 149              		.loc 1 97 3 is_stmt 1 view .LVU39
 150              		.loc 1 97 8 is_stmt 0 view .LVU40
 151 0050 5A68     		ldr	r2, [r3, #4]
 152              		.loc 1 97 17 view .LVU41
 153 0052 1349     		ldr	r1, .L5+20
 154 0054 0A40     		ands	r2, r1
 155 0056 5A60     		str	r2, [r3, #4]
  98:Src/main.c    ****   GPIOC->OSPEEDR &= ~GPIO_OSPEEDR_OSPEEDR8_0; //Low speed
 156              		.loc 1 98 3 is_stmt 1 view .LVU42
 157              		.loc 1 98 8 is_stmt 0 view .LVU43
 158 0058 9A68     		ldr	r2, [r3, #8]
 159              		.loc 1 98 18 view .LVU44
 160 005a 1249     		ldr	r1, .L5+24
 161 005c 0A40     		ands	r2, r1
 162 005e 9A60     		str	r2, [r3, #8]
  99:Src/main.c    ****   GPIOC->PUPDR &= ~(GPIO_PUPDR_PUPDR8_0 | GPIO_PUPDR_PUPDR8_1); //No pull up or down
 163              		.loc 1 99 3 is_stmt 1 view .LVU45
 164              		.loc 1 99 8 is_stmt 0 view .LVU46
 165 0060 DA68     		ldr	r2, [r3, #12]
 166              		.loc 1 99 16 view .LVU47
 167 0062 1149     		ldr	r1, .L5+28
 168 0064 0A40     		ands	r2, r1
 169 0066 DA60     		str	r2, [r3, #12]
 100:Src/main.c    **** 
 101:Src/main.c    ****   //Initialize green LED, PC9
 102:Src/main.c    ****   GPIOC->MODER |= GPIO_MODER_MODER9_0; //General purpose output
 170              		.loc 1 102 3 is_stmt 1 view .LVU48
 171              		.loc 1 102 8 is_stmt 0 view .LVU49
 172 0068 1968     		ldr	r1, [r3]
 173              		.loc 1 102 16 view .LVU50
 174 006a 8022     		movs	r2, #128
 175 006c D202     		lsls	r2, r2, #11
 176 006e 0A43     		orrs	r2, r1
 177 0070 1A60     		str	r2, [r3]
 103:Src/main.c    ****   GPIOC->OTYPER &= ~GPIO_OTYPER_OT_9; // Push-pull
 178              		.loc 1 103 3 is_stmt 1 view .LVU51
 179              		.loc 1 103 8 is_stmt 0 view .LVU52
 180 0072 5A68     		ldr	r2, [r3, #4]
 181              		.loc 1 103 17 view .LVU53
 182 0074 0D49     		ldr	r1, .L5+32
 183 0076 0A40     		ands	r2, r1
 184 0078 5A60     		str	r2, [r3, #4]
 104:Src/main.c    ****   GPIOC->OSPEEDR &= ~GPIO_OSPEEDR_OSPEEDR9_0; //Low speed
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccXucmVD.s 			page 6


 185              		.loc 1 104 3 is_stmt 1 view .LVU54
 186              		.loc 1 104 8 is_stmt 0 view .LVU55
 187 007a 9A68     		ldr	r2, [r3, #8]
 188              		.loc 1 104 18 view .LVU56
 189 007c 0C49     		ldr	r1, .L5+36
 190 007e 0A40     		ands	r2, r1
 191 0080 9A60     		str	r2, [r3, #8]
 105:Src/main.c    ****   GPIOC->PUPDR &= ~(GPIO_PUPDR_PUPDR9_0 | GPIO_PUPDR_PUPDR9_1); //No pull up or down
 192              		.loc 1 105 3 is_stmt 1 view .LVU57
 193              		.loc 1 105 8 is_stmt 0 view .LVU58
 194 0082 DA68     		ldr	r2, [r3, #12]
 195              		.loc 1 105 16 view .LVU59
 196 0084 0B49     		ldr	r1, .L5+40
 197 0086 0A40     		ands	r2, r1
 198 0088 DA60     		str	r2, [r3, #12]
 106:Src/main.c    **** 
 107:Src/main.c    **** }
 199              		.loc 1 107 1 view .LVU60
 200              		@ sp needed
 201 008a 7047     		bx	lr
 202              	.L6:
 203              		.align	2
 204              	.L5:
 205 008c 00080048 		.word	1207961600
 206 0090 FFEFFFFF 		.word	-4097
 207 0094 FFCFFFFF 		.word	-12289
 208 0098 FFBFFFFF 		.word	-16385
 209 009c FF3FFFFF 		.word	-49153
 210 00a0 FFFEFFFF 		.word	-257
 211 00a4 FFFFFEFF 		.word	-65537
 212 00a8 FFFFFCFF 		.word	-196609
 213 00ac FFFDFFFF 		.word	-513
 214 00b0 FFFFFBFF 		.word	-262145
 215 00b4 FFFFF3FF 		.word	-786433
 216              		.cfi_endproc
 217              	.LFE41:
 219              		.section	.text._Error_Handler,"ax",%progbits
 220              		.align	1
 221              		.global	_Error_Handler
 222              		.syntax unified
 223              		.code	16
 224              		.thumb_func
 226              	_Error_Handler:
 227              	.LFB44:
 108:Src/main.c    **** 
 109:Src/main.c    **** int main(void) 
 110:Src/main.c    **** {
 111:Src/main.c    ****   HAL_Init(); // Reset of all peripherals, init the Flash and Systick
 112:Src/main.c    ****   SystemClock_Config(); //Configure the system clock
 113:Src/main.c    **** 
 114:Src/main.c    ****   //Enable GPIOC and GPIOA clock
 115:Src/main.c    ****   RCC->AHBENR |= RCC_AHBENR_GPIOCEN; 
 116:Src/main.c    ****   RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 117:Src/main.c    ****   
 118:Src/main.c    ****   //Initialize all LEDs
 119:Src/main.c    ****   init_leds(); 
 120:Src/main.c    ****   
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccXucmVD.s 			page 7


 121:Src/main.c    ****   //Set green LED on
 122:Src/main.c    ****   GPIOC->BSRR |= GPIO_BSRR_BS_9;
 123:Src/main.c    **** 
 124:Src/main.c    ****   //Initialize button
 125:Src/main.c    ****   GPIOA->MODER &= ~(GPIO_MODER_MODER0 | GPIO_MODER_MODER1); //Input
 126:Src/main.c    ****   GPIOA->OSPEEDR &= ~GPIO_OSPEEDR_OSPEEDR0; //Low speed
 127:Src/main.c    ****   GPIOA->PUPDR |= GPIO_PUPDR_PUPDR0_1; //Pull down
 128:Src/main.c    ****   GPIOA->PUPDR &= ~GPIO_PUPDR_PUPDR0_0; //Pull down
 129:Src/main.c    **** 
 130:Src/main.c    ****   //Unmask EXTI0
 131:Src/main.c    ****   EXTI->IMR |= EXTI_IMR_MR0;
 132:Src/main.c    ****   //EXTI0 rising edge trigger
 133:Src/main.c    ****   EXTI->RTSR |= EXTI_RTSR_TR0;
 134:Src/main.c    ****   //Enable RCC for SYSCFG
 135:Src/main.c    ****   RCC->APB2ENR |= RCC_APB2ENR_SYSCFGCOMPEN;
 136:Src/main.c    ****   //Route PA0 to EXTI0
 137:Src/main.c    ****   SYSCFG->EXTICR[1] &= ~(SYSCFG_EXTICR1_EXTI0_PA);
 138:Src/main.c    ****   //Enable EXTI0 interrupt
 139:Src/main.c    ****   NVIC_EnableIRQ(EXTI0_1_IRQn);
 140:Src/main.c    ****   //Set EXTI0 interrupt priority to 1
 141:Src/main.c    ****   NVIC_SetPriority(EXTI0_1_IRQn, 1);
 142:Src/main.c    **** 
 143:Src/main.c    ****   while (1) 
 144:Src/main.c    ****   {
 145:Src/main.c    ****     //Delay 
 146:Src/main.c    ****     HAL_Delay(500); 
 147:Src/main.c    ****     //Toggle red LED
 148:Src/main.c    ****     GPIOC->ODR ^= GPIO_ODR_6;
 149:Src/main.c    ****   }
 150:Src/main.c    **** }
 151:Src/main.c    **** 
 152:Src/main.c    **** /** System Clock Configuration
 153:Src/main.c    **** */
 154:Src/main.c    **** void SystemClock_Config(void)
 155:Src/main.c    **** {
 156:Src/main.c    **** 
 157:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 158:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 159:Src/main.c    **** 
 160:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks
 161:Src/main.c    ****     */
 162:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 163:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 164:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 165:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 166:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 167:Src/main.c    ****   {
 168:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 169:Src/main.c    ****   }
 170:Src/main.c    **** 
 171:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks
 172:Src/main.c    ****     */
 173:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 174:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1;
 175:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 176:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 177:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccXucmVD.s 			page 8


 178:Src/main.c    **** 
 179:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 180:Src/main.c    ****   {
 181:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 182:Src/main.c    ****   }
 183:Src/main.c    **** 
 184:Src/main.c    ****     /**Configure the Systick interrupt time
 185:Src/main.c    ****     */
 186:Src/main.c    ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 187:Src/main.c    **** 
 188:Src/main.c    ****     /**Configure the Systick
 189:Src/main.c    ****     */
 190:Src/main.c    ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 191:Src/main.c    **** 
 192:Src/main.c    ****   /* SysTick_IRQn interrupt configuration */
 193:Src/main.c    ****   HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 194:Src/main.c    **** }
 195:Src/main.c    **** 
 196:Src/main.c    **** /* USER CODE BEGIN 4 */
 197:Src/main.c    **** 
 198:Src/main.c    **** /* USER CODE END 4 */
 199:Src/main.c    **** 
 200:Src/main.c    **** /**
 201:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 202:Src/main.c    ****   * @param  None
 203:Src/main.c    ****   * @retval None
 204:Src/main.c    ****   */
 205:Src/main.c    **** void _Error_Handler(char * file, int line)
 206:Src/main.c    **** {
 228              		.loc 1 206 1 is_stmt 1 view -0
 229              		.cfi_startproc
 230              		@ Volatile: function does not return.
 231              		@ args = 0, pretend = 0, frame = 0
 232              		@ frame_needed = 0, uses_anonymous_args = 0
 233              		@ link register save eliminated.
 234              	.LVL0:
 235              	.L8:
 207:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 208:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 209:Src/main.c    ****   while(1)
 236              		.loc 1 209 3 view .LVU62
 210:Src/main.c    ****   {
 211:Src/main.c    ****   }
 237              		.loc 1 211 3 view .LVU63
 209:Src/main.c    ****   {
 238              		.loc 1 209 8 view .LVU64
 239 0000 FEE7     		b	.L8
 240              		.cfi_endproc
 241              	.LFE44:
 243              		.section	.rodata.SystemClock_Config.str1.4,"aMS",%progbits,1
 244              		.align	2
 245              	.LC0:
 246 0000 5372632F 		.ascii	"Src/main.c\000"
 246      6D61696E 
 246      2E6300
 247              		.global	__aeabi_uidiv
 248              		.section	.text.SystemClock_Config,"ax",%progbits
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccXucmVD.s 			page 9


 249              		.align	1
 250              		.global	SystemClock_Config
 251              		.syntax unified
 252              		.code	16
 253              		.thumb_func
 255              	SystemClock_Config:
 256              	.LFB43:
 155:Src/main.c    **** 
 257              		.loc 1 155 1 view -0
 258              		.cfi_startproc
 259              		@ args = 0, pretend = 0, frame = 72
 260              		@ frame_needed = 0, uses_anonymous_args = 0
 261 0000 00B5     		push	{lr}
 262              	.LCFI0:
 263              		.cfi_def_cfa_offset 4
 264              		.cfi_offset 14, -4
 265 0002 93B0     		sub	sp, sp, #76
 266              	.LCFI1:
 267              		.cfi_def_cfa_offset 80
 157:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 268              		.loc 1 157 3 view .LVU66
 158:Src/main.c    **** 
 269              		.loc 1 158 3 view .LVU67
 162:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 270              		.loc 1 162 3 view .LVU68
 162:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 271              		.loc 1 162 36 is_stmt 0 view .LVU69
 272 0004 0223     		movs	r3, #2
 273 0006 0593     		str	r3, [sp, #20]
 163:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 274              		.loc 1 163 3 is_stmt 1 view .LVU70
 163:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 275              		.loc 1 163 30 is_stmt 0 view .LVU71
 276 0008 013B     		subs	r3, r3, #1
 277 000a 0893     		str	r3, [sp, #32]
 164:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 278              		.loc 1 164 3 is_stmt 1 view .LVU72
 164:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 279              		.loc 1 164 41 is_stmt 0 view .LVU73
 280 000c 0F33     		adds	r3, r3, #15
 281 000e 0993     		str	r3, [sp, #36]
 165:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 282              		.loc 1 165 3 is_stmt 1 view .LVU74
 165:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 283              		.loc 1 165 34 is_stmt 0 view .LVU75
 284 0010 0023     		movs	r3, #0
 285 0012 0E93     		str	r3, [sp, #56]
 166:Src/main.c    ****   {
 286              		.loc 1 166 3 is_stmt 1 view .LVU76
 166:Src/main.c    ****   {
 287              		.loc 1 166 7 is_stmt 0 view .LVU77
 288 0014 05A8     		add	r0, sp, #20
 289 0016 FFF7FEFF 		bl	HAL_RCC_OscConfig
 290              	.LVL1:
 166:Src/main.c    ****   {
 291              		.loc 1 166 6 discriminator 1 view .LVU78
 292 001a 0028     		cmp	r0, #0
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccXucmVD.s 			page 10


 293 001c 1ED1     		bne	.L12
 173:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1;
 294              		.loc 1 173 3 is_stmt 1 view .LVU79
 173:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1;
 295              		.loc 1 173 31 is_stmt 0 view .LVU80
 296 001e 0723     		movs	r3, #7
 297 0020 0193     		str	r3, [sp, #4]
 175:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 298              		.loc 1 175 3 is_stmt 1 view .LVU81
 175:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 299              		.loc 1 175 34 is_stmt 0 view .LVU82
 300 0022 0023     		movs	r3, #0
 301 0024 0293     		str	r3, [sp, #8]
 176:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 302              		.loc 1 176 3 is_stmt 1 view .LVU83
 176:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 303              		.loc 1 176 35 is_stmt 0 view .LVU84
 304 0026 0393     		str	r3, [sp, #12]
 177:Src/main.c    **** 
 305              		.loc 1 177 3 is_stmt 1 view .LVU85
 177:Src/main.c    **** 
 306              		.loc 1 177 36 is_stmt 0 view .LVU86
 307 0028 0493     		str	r3, [sp, #16]
 179:Src/main.c    ****   {
 308              		.loc 1 179 3 is_stmt 1 view .LVU87
 179:Src/main.c    ****   {
 309              		.loc 1 179 7 is_stmt 0 view .LVU88
 310 002a 0021     		movs	r1, #0
 311 002c 01A8     		add	r0, sp, #4
 312 002e FFF7FEFF 		bl	HAL_RCC_ClockConfig
 313              	.LVL2:
 179:Src/main.c    ****   {
 314              		.loc 1 179 6 discriminator 1 view .LVU89
 315 0032 0028     		cmp	r0, #0
 316 0034 16D1     		bne	.L13
 186:Src/main.c    **** 
 317              		.loc 1 186 3 is_stmt 1 view .LVU90
 186:Src/main.c    **** 
 318              		.loc 1 186 22 is_stmt 0 view .LVU91
 319 0036 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 320              	.LVL3:
 186:Src/main.c    **** 
 321              		.loc 1 186 3 discriminator 1 view .LVU92
 322 003a FA21     		movs	r1, #250
 323 003c 8900     		lsls	r1, r1, #2
 324 003e FFF7FEFF 		bl	__aeabi_uidiv
 325              	.LVL4:
 326 0042 FFF7FEFF 		bl	HAL_SYSTICK_Config
 327              	.LVL5:
 190:Src/main.c    **** 
 328              		.loc 1 190 3 is_stmt 1 view .LVU93
 329 0046 0420     		movs	r0, #4
 330 0048 FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 331              	.LVL6:
 193:Src/main.c    **** }
 332              		.loc 1 193 3 view .LVU94
 333 004c 0120     		movs	r0, #1
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccXucmVD.s 			page 11


 334 004e 0022     		movs	r2, #0
 335 0050 0021     		movs	r1, #0
 336 0052 4042     		rsbs	r0, r0, #0
 337 0054 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 338              	.LVL7:
 194:Src/main.c    **** 
 339              		.loc 1 194 1 is_stmt 0 view .LVU95
 340 0058 13B0     		add	sp, sp, #76
 341              		@ sp needed
 342 005a 00BD     		pop	{pc}
 343              	.L12:
 168:Src/main.c    ****   }
 344              		.loc 1 168 5 is_stmt 1 view .LVU96
 345 005c 0348     		ldr	r0, .L14
 346 005e A821     		movs	r1, #168
 347 0060 FFF7FEFF 		bl	_Error_Handler
 348              	.LVL8:
 349              	.L13:
 181:Src/main.c    ****   }
 350              		.loc 1 181 5 view .LVU97
 351 0064 0148     		ldr	r0, .L14
 352 0066 B521     		movs	r1, #181
 353 0068 FFF7FEFF 		bl	_Error_Handler
 354              	.LVL9:
 355              	.L15:
 356              		.align	2
 357              	.L14:
 358 006c 00000000 		.word	.LC0
 359              		.cfi_endproc
 360              	.LFE43:
 362              		.section	.text.main,"ax",%progbits
 363              		.align	1
 364              		.global	main
 365              		.syntax unified
 366              		.code	16
 367              		.thumb_func
 369              	main:
 370              	.LFB42:
 110:Src/main.c    ****   HAL_Init(); // Reset of all peripherals, init the Flash and Systick
 371              		.loc 1 110 1 view -0
 372              		.cfi_startproc
 373              		@ Volatile: function does not return.
 374              		@ args = 0, pretend = 0, frame = 0
 375              		@ frame_needed = 0, uses_anonymous_args = 0
 376 0000 10B5     		push	{r4, lr}
 377              	.LCFI2:
 378              		.cfi_def_cfa_offset 8
 379              		.cfi_offset 4, -8
 380              		.cfi_offset 14, -4
 111:Src/main.c    ****   SystemClock_Config(); //Configure the system clock
 381              		.loc 1 111 3 view .LVU99
 382 0002 FFF7FEFF 		bl	HAL_Init
 383              	.LVL10:
 112:Src/main.c    **** 
 384              		.loc 1 112 3 view .LVU100
 385 0006 FFF7FEFF 		bl	SystemClock_Config
 386              	.LVL11:
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccXucmVD.s 			page 12


 115:Src/main.c    ****   RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 387              		.loc 1 115 3 view .LVU101
 115:Src/main.c    ****   RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 388              		.loc 1 115 6 is_stmt 0 view .LVU102
 389 000a 244C     		ldr	r4, .L18
 390 000c 6269     		ldr	r2, [r4, #20]
 115:Src/main.c    ****   RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 391              		.loc 1 115 15 view .LVU103
 392 000e 8023     		movs	r3, #128
 393 0010 1B03     		lsls	r3, r3, #12
 394 0012 1343     		orrs	r3, r2
 395 0014 6361     		str	r3, [r4, #20]
 116:Src/main.c    ****   
 396              		.loc 1 116 3 is_stmt 1 view .LVU104
 116:Src/main.c    ****   
 397              		.loc 1 116 6 is_stmt 0 view .LVU105
 398 0016 6269     		ldr	r2, [r4, #20]
 116:Src/main.c    ****   
 399              		.loc 1 116 15 view .LVU106
 400 0018 8023     		movs	r3, #128
 401 001a 9B02     		lsls	r3, r3, #10
 402 001c 1343     		orrs	r3, r2
 403 001e 6361     		str	r3, [r4, #20]
 119:Src/main.c    ****   
 404              		.loc 1 119 3 is_stmt 1 view .LVU107
 405 0020 FFF7FEFF 		bl	init_leds
 406              	.LVL12:
 122:Src/main.c    **** 
 407              		.loc 1 122 3 view .LVU108
 122:Src/main.c    **** 
 408              		.loc 1 122 8 is_stmt 0 view .LVU109
 409 0024 1E4A     		ldr	r2, .L18+4
 410 0026 9169     		ldr	r1, [r2, #24]
 122:Src/main.c    **** 
 411              		.loc 1 122 15 view .LVU110
 412 0028 8023     		movs	r3, #128
 413 002a 9B00     		lsls	r3, r3, #2
 414 002c 0B43     		orrs	r3, r1
 415 002e 9361     		str	r3, [r2, #24]
 125:Src/main.c    ****   GPIOA->OSPEEDR &= ~GPIO_OSPEEDR_OSPEEDR0; //Low speed
 416              		.loc 1 125 3 is_stmt 1 view .LVU111
 125:Src/main.c    ****   GPIOA->OSPEEDR &= ~GPIO_OSPEEDR_OSPEEDR0; //Low speed
 417              		.loc 1 125 8 is_stmt 0 view .LVU112
 418 0030 9023     		movs	r3, #144
 419 0032 DB05     		lsls	r3, r3, #23
 420 0034 1A68     		ldr	r2, [r3]
 125:Src/main.c    ****   GPIOA->OSPEEDR &= ~GPIO_OSPEEDR_OSPEEDR0; //Low speed
 421              		.loc 1 125 16 view .LVU113
 422 0036 0F21     		movs	r1, #15
 423 0038 8A43     		bics	r2, r1
 424 003a 1A60     		str	r2, [r3]
 126:Src/main.c    ****   GPIOA->PUPDR |= GPIO_PUPDR_PUPDR0_1; //Pull down
 425              		.loc 1 126 3 is_stmt 1 view .LVU114
 126:Src/main.c    ****   GPIOA->PUPDR |= GPIO_PUPDR_PUPDR0_1; //Pull down
 426              		.loc 1 126 8 is_stmt 0 view .LVU115
 427 003c 9A68     		ldr	r2, [r3, #8]
 126:Src/main.c    ****   GPIOA->PUPDR |= GPIO_PUPDR_PUPDR0_1; //Pull down
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccXucmVD.s 			page 13


 428              		.loc 1 126 18 view .LVU116
 429 003e 0C39     		subs	r1, r1, #12
 430 0040 8A43     		bics	r2, r1
 431 0042 9A60     		str	r2, [r3, #8]
 127:Src/main.c    ****   GPIOA->PUPDR &= ~GPIO_PUPDR_PUPDR0_0; //Pull down
 432              		.loc 1 127 3 is_stmt 1 view .LVU117
 127:Src/main.c    ****   GPIOA->PUPDR &= ~GPIO_PUPDR_PUPDR0_0; //Pull down
 433              		.loc 1 127 8 is_stmt 0 view .LVU118
 434 0044 DA68     		ldr	r2, [r3, #12]
 127:Src/main.c    ****   GPIOA->PUPDR &= ~GPIO_PUPDR_PUPDR0_0; //Pull down
 435              		.loc 1 127 16 view .LVU119
 436 0046 0139     		subs	r1, r1, #1
 437 0048 0A43     		orrs	r2, r1
 438 004a DA60     		str	r2, [r3, #12]
 128:Src/main.c    **** 
 439              		.loc 1 128 3 is_stmt 1 view .LVU120
 128:Src/main.c    **** 
 440              		.loc 1 128 8 is_stmt 0 view .LVU121
 441 004c D968     		ldr	r1, [r3, #12]
 128:Src/main.c    **** 
 442              		.loc 1 128 16 view .LVU122
 443 004e 0122     		movs	r2, #1
 444 0050 9143     		bics	r1, r2
 445 0052 D960     		str	r1, [r3, #12]
 131:Src/main.c    ****   //EXTI0 rising edge trigger
 446              		.loc 1 131 3 is_stmt 1 view .LVU123
 131:Src/main.c    ****   //EXTI0 rising edge trigger
 447              		.loc 1 131 7 is_stmt 0 view .LVU124
 448 0054 134B     		ldr	r3, .L18+8
 449 0056 1968     		ldr	r1, [r3]
 131:Src/main.c    ****   //EXTI0 rising edge trigger
 450              		.loc 1 131 13 view .LVU125
 451 0058 1143     		orrs	r1, r2
 452 005a 1960     		str	r1, [r3]
 133:Src/main.c    ****   //Enable RCC for SYSCFG
 453              		.loc 1 133 3 is_stmt 1 view .LVU126
 133:Src/main.c    ****   //Enable RCC for SYSCFG
 454              		.loc 1 133 7 is_stmt 0 view .LVU127
 455 005c 9968     		ldr	r1, [r3, #8]
 133:Src/main.c    ****   //Enable RCC for SYSCFG
 456              		.loc 1 133 14 view .LVU128
 457 005e 1143     		orrs	r1, r2
 458 0060 9960     		str	r1, [r3, #8]
 135:Src/main.c    ****   //Route PA0 to EXTI0
 459              		.loc 1 135 3 is_stmt 1 view .LVU129
 135:Src/main.c    ****   //Route PA0 to EXTI0
 460              		.loc 1 135 6 is_stmt 0 view .LVU130
 461 0062 A369     		ldr	r3, [r4, #24]
 135:Src/main.c    ****   //Route PA0 to EXTI0
 462              		.loc 1 135 16 view .LVU131
 463 0064 1343     		orrs	r3, r2
 464 0066 A361     		str	r3, [r4, #24]
 137:Src/main.c    ****   //Enable EXTI0 interrupt
 465              		.loc 1 137 3 is_stmt 1 view .LVU132
 137:Src/main.c    ****   //Enable EXTI0 interrupt
 466              		.loc 1 137 17 is_stmt 0 view .LVU133
 467 0068 0F4B     		ldr	r3, .L18+12
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccXucmVD.s 			page 14


 468 006a DA68     		ldr	r2, [r3, #12]
 137:Src/main.c    ****   //Enable EXTI0 interrupt
 469              		.loc 1 137 21 view .LVU134
 470 006c DA60     		str	r2, [r3, #12]
 139:Src/main.c    ****   //Set EXTI0 interrupt priority to 1
 471              		.loc 1 139 3 is_stmt 1 view .LVU135
 472              	.LVL13:
 473              	.LBB6:
 474              	.LBI6:
 475              		.file 2 "Drivers/CMSIS/Include/core_cm0.h"
   1:Drivers/CMSIS/Include/core_cm0.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cm0.h ****  * @file     core_cm0.h
   3:Drivers/CMSIS/Include/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:Drivers/CMSIS/Include/core_cm0.h ****  * @version  V5.0.5
   5:Drivers/CMSIS/Include/core_cm0.h ****  * @date     28. May 2018
   6:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/core_cm0.h **** /*
   8:Drivers/CMSIS/Include/core_cm0.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/core_cm0.h ****  *
  10:Drivers/CMSIS/Include/core_cm0.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/core_cm0.h ****  *
  12:Drivers/CMSIS/Include/core_cm0.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/core_cm0.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/core_cm0.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/core_cm0.h ****  *
  16:Drivers/CMSIS/Include/core_cm0.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/core_cm0.h ****  *
  18:Drivers/CMSIS/Include/core_cm0.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/core_cm0.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/core_cm0.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/core_cm0.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/core_cm0.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/core_cm0.h ****  */
  24:Drivers/CMSIS/Include/core_cm0.h **** 
  25:Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __ICCARM__ )
  26:Drivers/CMSIS/Include/core_cm0.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__clang__)
  28:Drivers/CMSIS/Include/core_cm0.h ****   #pragma clang system_header   /* treat file as system include file */
  29:Drivers/CMSIS/Include/core_cm0.h **** #endif
  30:Drivers/CMSIS/Include/core_cm0.h **** 
  31:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_GENERIC
  32:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_GENERIC
  33:Drivers/CMSIS/Include/core_cm0.h **** 
  34:Drivers/CMSIS/Include/core_cm0.h **** #include <stdint.h>
  35:Drivers/CMSIS/Include/core_cm0.h **** 
  36:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
  37:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
  38:Drivers/CMSIS/Include/core_cm0.h **** #endif
  39:Drivers/CMSIS/Include/core_cm0.h **** 
  40:Drivers/CMSIS/Include/core_cm0.h **** /**
  41:Drivers/CMSIS/Include/core_cm0.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:Drivers/CMSIS/Include/core_cm0.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:Drivers/CMSIS/Include/core_cm0.h **** 
  44:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:Drivers/CMSIS/Include/core_cm0.h ****      Function definitions in header files are used to allow 'inlining'.
  46:Drivers/CMSIS/Include/core_cm0.h **** 
  47:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccXucmVD.s 			page 15


  48:Drivers/CMSIS/Include/core_cm0.h ****      Unions are used for effective representation of core registers.
  49:Drivers/CMSIS/Include/core_cm0.h **** 
  50:Drivers/CMSIS/Include/core_cm0.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:Drivers/CMSIS/Include/core_cm0.h ****      Function-like macros are used to allow more efficient code.
  52:Drivers/CMSIS/Include/core_cm0.h ****  */
  53:Drivers/CMSIS/Include/core_cm0.h **** 
  54:Drivers/CMSIS/Include/core_cm0.h **** 
  55:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
  56:Drivers/CMSIS/Include/core_cm0.h ****  *                 CMSIS definitions
  57:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
  58:Drivers/CMSIS/Include/core_cm0.h **** /**
  59:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup Cortex_M0
  60:Drivers/CMSIS/Include/core_cm0.h ****   @{
  61:Drivers/CMSIS/Include/core_cm0.h ****  */
  62:Drivers/CMSIS/Include/core_cm0.h **** 
  63:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_version.h"
  64:Drivers/CMSIS/Include/core_cm0.h ****  
  65:Drivers/CMSIS/Include/core_cm0.h **** /*  CMSIS CM0 definitions */
  66:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)              /*!< \deprecated [31:16] C
  67:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (__CM_CMSIS_VERSION_SUB)               /*!< \deprecated [15:0]  C
  68:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) | \
  69:Drivers/CMSIS/Include/core_cm0.h ****                                     __CM0_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL
  70:Drivers/CMSIS/Include/core_cm0.h **** 
  71:Drivers/CMSIS/Include/core_cm0.h **** #define __CORTEX_M                (0U)                                   /*!< Cortex-M Core */
  72:Drivers/CMSIS/Include/core_cm0.h **** 
  73:Drivers/CMSIS/Include/core_cm0.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:Drivers/CMSIS/Include/core_cm0.h ****     This core does not support an FPU at all
  75:Drivers/CMSIS/Include/core_cm0.h **** */
  76:Drivers/CMSIS/Include/core_cm0.h **** #define __FPU_USED       0U
  77:Drivers/CMSIS/Include/core_cm0.h **** 
  78:Drivers/CMSIS/Include/core_cm0.h **** #if defined ( __CC_ARM )
  79:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TARGET_FPU_VFP
  80:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  81:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  82:Drivers/CMSIS/Include/core_cm0.h **** 
  83:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  84:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARM_PCS_VFP
  85:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  86:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  87:Drivers/CMSIS/Include/core_cm0.h **** 
  88:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
  89:Drivers/CMSIS/Include/core_cm0.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
  90:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  91:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  92:Drivers/CMSIS/Include/core_cm0.h **** 
  93:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
  94:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARMVFP__
  95:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  96:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  97:Drivers/CMSIS/Include/core_cm0.h **** 
  98:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TI_ARM__ )
  99:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TI_VFP_SUPPORT__
 100:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 101:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 102:Drivers/CMSIS/Include/core_cm0.h **** 
 103:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 104:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __FPU_VFP__
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccXucmVD.s 			page 16


 105:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 106:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 107:Drivers/CMSIS/Include/core_cm0.h **** 
 108:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 109:Drivers/CMSIS/Include/core_cm0.h ****   #if ( __CSMC__ & 0x400U)
 110:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 111:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 112:Drivers/CMSIS/Include/core_cm0.h **** 
 113:Drivers/CMSIS/Include/core_cm0.h **** #endif
 114:Drivers/CMSIS/Include/core_cm0.h **** 
 115:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 116:Drivers/CMSIS/Include/core_cm0.h **** 
 117:Drivers/CMSIS/Include/core_cm0.h **** 
 118:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 119:Drivers/CMSIS/Include/core_cm0.h **** }
 120:Drivers/CMSIS/Include/core_cm0.h **** #endif
 121:Drivers/CMSIS/Include/core_cm0.h **** 
 122:Drivers/CMSIS/Include/core_cm0.h **** #endif /* __CORE_CM0_H_GENERIC */
 123:Drivers/CMSIS/Include/core_cm0.h **** 
 124:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CMSIS_GENERIC
 125:Drivers/CMSIS/Include/core_cm0.h **** 
 126:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_DEPENDANT
 127:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_DEPENDANT
 128:Drivers/CMSIS/Include/core_cm0.h **** 
 129:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 130:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
 131:Drivers/CMSIS/Include/core_cm0.h **** #endif
 132:Drivers/CMSIS/Include/core_cm0.h **** 
 133:Drivers/CMSIS/Include/core_cm0.h **** /* check device defines and use defaults */
 134:Drivers/CMSIS/Include/core_cm0.h **** #if defined __CHECK_DEVICE_DEFINES
 135:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __CM0_REV
 136:Drivers/CMSIS/Include/core_cm0.h ****     #define __CM0_REV               0x0000U
 137:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__CM0_REV not defined in device header file; using default!"
 138:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 139:Drivers/CMSIS/Include/core_cm0.h **** 
 140:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __NVIC_PRIO_BITS
 141:Drivers/CMSIS/Include/core_cm0.h ****     #define __NVIC_PRIO_BITS          2U
 142:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 143:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 144:Drivers/CMSIS/Include/core_cm0.h **** 
 145:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __Vendor_SysTickConfig
 146:Drivers/CMSIS/Include/core_cm0.h ****     #define __Vendor_SysTickConfig    0U
 147:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 148:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 149:Drivers/CMSIS/Include/core_cm0.h **** #endif
 150:Drivers/CMSIS/Include/core_cm0.h **** 
 151:Drivers/CMSIS/Include/core_cm0.h **** /* IO definitions (access restrictions to peripheral registers) */
 152:Drivers/CMSIS/Include/core_cm0.h **** /**
 153:Drivers/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 154:Drivers/CMSIS/Include/core_cm0.h **** 
 155:Drivers/CMSIS/Include/core_cm0.h ****     <strong>IO Type Qualifiers</strong> are used
 156:Drivers/CMSIS/Include/core_cm0.h ****     \li to specify the access to peripheral variables.
 157:Drivers/CMSIS/Include/core_cm0.h ****     \li for automatic generation of peripheral register debug information.
 158:Drivers/CMSIS/Include/core_cm0.h **** */
 159:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 160:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 161:Drivers/CMSIS/Include/core_cm0.h **** #else
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccXucmVD.s 			page 17


 162:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 163:Drivers/CMSIS/Include/core_cm0.h **** #endif
 164:Drivers/CMSIS/Include/core_cm0.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 165:Drivers/CMSIS/Include/core_cm0.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 166:Drivers/CMSIS/Include/core_cm0.h **** 
 167:Drivers/CMSIS/Include/core_cm0.h **** /* following defines should be used for structure members */
 168:Drivers/CMSIS/Include/core_cm0.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 169:Drivers/CMSIS/Include/core_cm0.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 170:Drivers/CMSIS/Include/core_cm0.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 171:Drivers/CMSIS/Include/core_cm0.h **** 
 172:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group Cortex_M0 */
 173:Drivers/CMSIS/Include/core_cm0.h **** 
 174:Drivers/CMSIS/Include/core_cm0.h **** 
 175:Drivers/CMSIS/Include/core_cm0.h **** 
 176:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 177:Drivers/CMSIS/Include/core_cm0.h ****  *                 Register Abstraction
 178:Drivers/CMSIS/Include/core_cm0.h ****   Core Register contain:
 179:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register
 180:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Register
 181:Drivers/CMSIS/Include/core_cm0.h ****   - Core SCB Register
 182:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Register
 183:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 184:Drivers/CMSIS/Include/core_cm0.h **** /**
 185:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 186:Drivers/CMSIS/Include/core_cm0.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 187:Drivers/CMSIS/Include/core_cm0.h **** */
 188:Drivers/CMSIS/Include/core_cm0.h **** 
 189:Drivers/CMSIS/Include/core_cm0.h **** /**
 190:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 191:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 192:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Core Register type definitions.
 193:Drivers/CMSIS/Include/core_cm0.h ****   @{
 194:Drivers/CMSIS/Include/core_cm0.h ****  */
 195:Drivers/CMSIS/Include/core_cm0.h **** 
 196:Drivers/CMSIS/Include/core_cm0.h **** /**
 197:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 198:Drivers/CMSIS/Include/core_cm0.h ****  */
 199:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 200:Drivers/CMSIS/Include/core_cm0.h **** {
 201:Drivers/CMSIS/Include/core_cm0.h ****   struct
 202:Drivers/CMSIS/Include/core_cm0.h ****   {
 203:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 204:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 205:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 206:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 207:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 208:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 209:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 210:Drivers/CMSIS/Include/core_cm0.h **** } APSR_Type;
 211:Drivers/CMSIS/Include/core_cm0.h **** 
 212:Drivers/CMSIS/Include/core_cm0.h **** /* APSR Register Definitions */
 213:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 214:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 215:Drivers/CMSIS/Include/core_cm0.h **** 
 216:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 217:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 218:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccXucmVD.s 			page 18


 219:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 220:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 221:Drivers/CMSIS/Include/core_cm0.h **** 
 222:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 223:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 224:Drivers/CMSIS/Include/core_cm0.h **** 
 225:Drivers/CMSIS/Include/core_cm0.h **** 
 226:Drivers/CMSIS/Include/core_cm0.h **** /**
 227:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 228:Drivers/CMSIS/Include/core_cm0.h ****  */
 229:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 230:Drivers/CMSIS/Include/core_cm0.h **** {
 231:Drivers/CMSIS/Include/core_cm0.h ****   struct
 232:Drivers/CMSIS/Include/core_cm0.h ****   {
 233:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 234:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 235:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 236:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 237:Drivers/CMSIS/Include/core_cm0.h **** } IPSR_Type;
 238:Drivers/CMSIS/Include/core_cm0.h **** 
 239:Drivers/CMSIS/Include/core_cm0.h **** /* IPSR Register Definitions */
 240:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 241:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 242:Drivers/CMSIS/Include/core_cm0.h **** 
 243:Drivers/CMSIS/Include/core_cm0.h **** 
 244:Drivers/CMSIS/Include/core_cm0.h **** /**
 245:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 246:Drivers/CMSIS/Include/core_cm0.h ****  */
 247:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 248:Drivers/CMSIS/Include/core_cm0.h **** {
 249:Drivers/CMSIS/Include/core_cm0.h ****   struct
 250:Drivers/CMSIS/Include/core_cm0.h ****   {
 251:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 252:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 253:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 254:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 255:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 256:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 257:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 258:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 259:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 260:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 261:Drivers/CMSIS/Include/core_cm0.h **** } xPSR_Type;
 262:Drivers/CMSIS/Include/core_cm0.h **** 
 263:Drivers/CMSIS/Include/core_cm0.h **** /* xPSR Register Definitions */
 264:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 265:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 266:Drivers/CMSIS/Include/core_cm0.h **** 
 267:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 268:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 269:Drivers/CMSIS/Include/core_cm0.h **** 
 270:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 271:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 272:Drivers/CMSIS/Include/core_cm0.h **** 
 273:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 274:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 275:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccXucmVD.s 			page 19


 276:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 277:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 278:Drivers/CMSIS/Include/core_cm0.h **** 
 279:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 280:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 281:Drivers/CMSIS/Include/core_cm0.h **** 
 282:Drivers/CMSIS/Include/core_cm0.h **** 
 283:Drivers/CMSIS/Include/core_cm0.h **** /**
 284:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Control Registers (CONTROL).
 285:Drivers/CMSIS/Include/core_cm0.h ****  */
 286:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 287:Drivers/CMSIS/Include/core_cm0.h **** {
 288:Drivers/CMSIS/Include/core_cm0.h ****   struct
 289:Drivers/CMSIS/Include/core_cm0.h ****   {
 290:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:1;               /*!< bit:      0  Reserved */
 291:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 292:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 293:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 294:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 295:Drivers/CMSIS/Include/core_cm0.h **** } CONTROL_Type;
 296:Drivers/CMSIS/Include/core_cm0.h **** 
 297:Drivers/CMSIS/Include/core_cm0.h **** /* CONTROL Register Definitions */
 298:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 299:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 300:Drivers/CMSIS/Include/core_cm0.h **** 
 301:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CORE */
 302:Drivers/CMSIS/Include/core_cm0.h **** 
 303:Drivers/CMSIS/Include/core_cm0.h **** 
 304:Drivers/CMSIS/Include/core_cm0.h **** /**
 305:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 306:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 307:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Type definitions for the NVIC Registers
 308:Drivers/CMSIS/Include/core_cm0.h ****   @{
 309:Drivers/CMSIS/Include/core_cm0.h ****  */
 310:Drivers/CMSIS/Include/core_cm0.h **** 
 311:Drivers/CMSIS/Include/core_cm0.h **** /**
 312:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 313:Drivers/CMSIS/Include/core_cm0.h ****  */
 314:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 315:Drivers/CMSIS/Include/core_cm0.h **** {
 316:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 317:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0[31U];
 318:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 319:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RSERVED1[31U];
 320:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 321:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED2[31U];
 322:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 323:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED3[31U];
 324:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED4[64U];
 325:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 326:Drivers/CMSIS/Include/core_cm0.h **** }  NVIC_Type;
 327:Drivers/CMSIS/Include/core_cm0.h **** 
 328:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_NVIC */
 329:Drivers/CMSIS/Include/core_cm0.h **** 
 330:Drivers/CMSIS/Include/core_cm0.h **** 
 331:Drivers/CMSIS/Include/core_cm0.h **** /**
 332:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccXucmVD.s 			page 20


 333:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 334:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Control Block Registers
 335:Drivers/CMSIS/Include/core_cm0.h ****   @{
 336:Drivers/CMSIS/Include/core_cm0.h ****  */
 337:Drivers/CMSIS/Include/core_cm0.h **** 
 338:Drivers/CMSIS/Include/core_cm0.h **** /**
 339:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Control Block (SCB).
 340:Drivers/CMSIS/Include/core_cm0.h ****  */
 341:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 342:Drivers/CMSIS/Include/core_cm0.h **** {
 343:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 344:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 345:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0;
 346:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 347:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 348:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 349:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED1;
 350:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 351:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 352:Drivers/CMSIS/Include/core_cm0.h **** } SCB_Type;
 353:Drivers/CMSIS/Include/core_cm0.h **** 
 354:Drivers/CMSIS/Include/core_cm0.h **** /* SCB CPUID Register Definitions */
 355:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 356:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 357:Drivers/CMSIS/Include/core_cm0.h **** 
 358:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 359:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 360:Drivers/CMSIS/Include/core_cm0.h **** 
 361:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 362:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 363:Drivers/CMSIS/Include/core_cm0.h **** 
 364:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 365:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 366:Drivers/CMSIS/Include/core_cm0.h **** 
 367:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 368:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 369:Drivers/CMSIS/Include/core_cm0.h **** 
 370:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 371:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 372:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 373:Drivers/CMSIS/Include/core_cm0.h **** 
 374:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 375:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 376:Drivers/CMSIS/Include/core_cm0.h **** 
 377:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 378:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 379:Drivers/CMSIS/Include/core_cm0.h **** 
 380:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 381:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 382:Drivers/CMSIS/Include/core_cm0.h **** 
 383:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 384:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 385:Drivers/CMSIS/Include/core_cm0.h **** 
 386:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 387:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 388:Drivers/CMSIS/Include/core_cm0.h **** 
 389:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccXucmVD.s 			page 21


 390:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 391:Drivers/CMSIS/Include/core_cm0.h **** 
 392:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 393:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 394:Drivers/CMSIS/Include/core_cm0.h **** 
 395:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 396:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 397:Drivers/CMSIS/Include/core_cm0.h **** 
 398:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 399:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 400:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 401:Drivers/CMSIS/Include/core_cm0.h **** 
 402:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 403:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 404:Drivers/CMSIS/Include/core_cm0.h **** 
 405:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 406:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 407:Drivers/CMSIS/Include/core_cm0.h **** 
 408:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 409:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 410:Drivers/CMSIS/Include/core_cm0.h **** 
 411:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 412:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 413:Drivers/CMSIS/Include/core_cm0.h **** 
 414:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Control Register Definitions */
 415:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 416:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 417:Drivers/CMSIS/Include/core_cm0.h **** 
 418:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 419:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 420:Drivers/CMSIS/Include/core_cm0.h **** 
 421:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 422:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 423:Drivers/CMSIS/Include/core_cm0.h **** 
 424:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 425:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 426:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 427:Drivers/CMSIS/Include/core_cm0.h **** 
 428:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 429:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 430:Drivers/CMSIS/Include/core_cm0.h **** 
 431:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 432:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 433:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 434:Drivers/CMSIS/Include/core_cm0.h **** 
 435:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SCB */
 436:Drivers/CMSIS/Include/core_cm0.h **** 
 437:Drivers/CMSIS/Include/core_cm0.h **** 
 438:Drivers/CMSIS/Include/core_cm0.h **** /**
 439:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 440:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 441:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Timer Registers.
 442:Drivers/CMSIS/Include/core_cm0.h ****   @{
 443:Drivers/CMSIS/Include/core_cm0.h ****  */
 444:Drivers/CMSIS/Include/core_cm0.h **** 
 445:Drivers/CMSIS/Include/core_cm0.h **** /**
 446:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Timer (SysTick).
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccXucmVD.s 			page 22


 447:Drivers/CMSIS/Include/core_cm0.h ****  */
 448:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 449:Drivers/CMSIS/Include/core_cm0.h **** {
 450:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 451:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 452:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 453:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 454:Drivers/CMSIS/Include/core_cm0.h **** } SysTick_Type;
 455:Drivers/CMSIS/Include/core_cm0.h **** 
 456:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 457:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 458:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 459:Drivers/CMSIS/Include/core_cm0.h **** 
 460:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 461:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 462:Drivers/CMSIS/Include/core_cm0.h **** 
 463:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 464:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 465:Drivers/CMSIS/Include/core_cm0.h **** 
 466:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 467:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 468:Drivers/CMSIS/Include/core_cm0.h **** 
 469:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Reload Register Definitions */
 470:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 471:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 472:Drivers/CMSIS/Include/core_cm0.h **** 
 473:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Current Register Definitions */
 474:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 475:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 476:Drivers/CMSIS/Include/core_cm0.h **** 
 477:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Calibration Register Definitions */
 478:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 479:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 480:Drivers/CMSIS/Include/core_cm0.h **** 
 481:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 482:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 483:Drivers/CMSIS/Include/core_cm0.h **** 
 484:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 485:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 486:Drivers/CMSIS/Include/core_cm0.h **** 
 487:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SysTick */
 488:Drivers/CMSIS/Include/core_cm0.h **** 
 489:Drivers/CMSIS/Include/core_cm0.h **** 
 490:Drivers/CMSIS/Include/core_cm0.h **** /**
 491:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 492:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 493:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ove
 494:Drivers/CMSIS/Include/core_cm0.h ****             Therefore they are not covered by the Cortex-M0 header file.
 495:Drivers/CMSIS/Include/core_cm0.h ****   @{
 496:Drivers/CMSIS/Include/core_cm0.h ****  */
 497:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CoreDebug */
 498:Drivers/CMSIS/Include/core_cm0.h **** 
 499:Drivers/CMSIS/Include/core_cm0.h **** 
 500:Drivers/CMSIS/Include/core_cm0.h **** /**
 501:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 502:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 503:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccXucmVD.s 			page 23


 504:Drivers/CMSIS/Include/core_cm0.h ****   @{
 505:Drivers/CMSIS/Include/core_cm0.h ****  */
 506:Drivers/CMSIS/Include/core_cm0.h **** 
 507:Drivers/CMSIS/Include/core_cm0.h **** /**
 508:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 509:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 510:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
 511:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted value.
 512:Drivers/CMSIS/Include/core_cm0.h **** */
 513:Drivers/CMSIS/Include/core_cm0.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
 514:Drivers/CMSIS/Include/core_cm0.h **** 
 515:Drivers/CMSIS/Include/core_cm0.h **** /**
 516:Drivers/CMSIS/Include/core_cm0.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 517:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 518:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
 519:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted bit field value.
 520:Drivers/CMSIS/Include/core_cm0.h **** */
 521:Drivers/CMSIS/Include/core_cm0.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
 522:Drivers/CMSIS/Include/core_cm0.h **** 
 523:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_core_bitfield */
 524:Drivers/CMSIS/Include/core_cm0.h **** 
 525:Drivers/CMSIS/Include/core_cm0.h **** 
 526:Drivers/CMSIS/Include/core_cm0.h **** /**
 527:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 528:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_base     Core Definitions
 529:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Definitions for base addresses, unions, and structures.
 530:Drivers/CMSIS/Include/core_cm0.h ****   @{
 531:Drivers/CMSIS/Include/core_cm0.h ****  */
 532:Drivers/CMSIS/Include/core_cm0.h **** 
 533:Drivers/CMSIS/Include/core_cm0.h **** /* Memory mapping of Core Hardware */
 534:Drivers/CMSIS/Include/core_cm0.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 535:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 536:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 537:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 538:Drivers/CMSIS/Include/core_cm0.h **** 
 539:Drivers/CMSIS/Include/core_cm0.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 540:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 541:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 542:Drivers/CMSIS/Include/core_cm0.h **** 
 543:Drivers/CMSIS/Include/core_cm0.h **** 
 544:Drivers/CMSIS/Include/core_cm0.h **** /*@} */
 545:Drivers/CMSIS/Include/core_cm0.h **** 
 546:Drivers/CMSIS/Include/core_cm0.h **** 
 547:Drivers/CMSIS/Include/core_cm0.h **** 
 548:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 549:Drivers/CMSIS/Include/core_cm0.h ****  *                Hardware Abstraction Layer
 550:Drivers/CMSIS/Include/core_cm0.h ****   Core Function Interface contains:
 551:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Functions
 552:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Functions
 553:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register Access Functions
 554:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 555:Drivers/CMSIS/Include/core_cm0.h **** /**
 556:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 557:Drivers/CMSIS/Include/core_cm0.h **** */
 558:Drivers/CMSIS/Include/core_cm0.h **** 
 559:Drivers/CMSIS/Include/core_cm0.h **** 
 560:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccXucmVD.s 			page 24


 561:Drivers/CMSIS/Include/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
 562:Drivers/CMSIS/Include/core_cm0.h **** /**
 563:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_Core_FunctionInterface
 564:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 565:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 566:Drivers/CMSIS/Include/core_cm0.h ****   @{
 567:Drivers/CMSIS/Include/core_cm0.h ****  */
 568:Drivers/CMSIS/Include/core_cm0.h **** 
 569:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_NVIC_VIRTUAL
 570:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
 571:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
 572:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 573:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
 574:Drivers/CMSIS/Include/core_cm0.h **** #else
 575:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
 576:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
 577:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
 578:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
 579:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
 580:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
 581:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
 582:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
 583:Drivers/CMSIS/Include/core_cm0.h **** /*#define NVIC_GetActive              __NVIC_GetActive             not available for Cortex-M0 */
 584:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
 585:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
 586:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
 587:Drivers/CMSIS/Include/core_cm0.h **** #endif /* CMSIS_NVIC_VIRTUAL */
 588:Drivers/CMSIS/Include/core_cm0.h **** 
 589:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_VECTAB_VIRTUAL
 590:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 591:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
 592:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 593:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 594:Drivers/CMSIS/Include/core_cm0.h **** #else
 595:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetVector              __NVIC_SetVector
 596:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetVector              __NVIC_GetVector
 597:Drivers/CMSIS/Include/core_cm0.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
 598:Drivers/CMSIS/Include/core_cm0.h **** 
 599:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_USER_IRQ_OFFSET          16
 600:Drivers/CMSIS/Include/core_cm0.h **** 
 601:Drivers/CMSIS/Include/core_cm0.h **** 
 602:Drivers/CMSIS/Include/core_cm0.h **** /* The following EXC_RETURN values are saved the LR on exception entry */
 603:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after ret
 604:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after retu
 605:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after retu
 606:Drivers/CMSIS/Include/core_cm0.h **** 
 607:Drivers/CMSIS/Include/core_cm0.h **** 
 608:Drivers/CMSIS/Include/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under Armv6-M                  */
 609:Drivers/CMSIS/Include/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 610:Drivers/CMSIS/Include/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 611:Drivers/CMSIS/Include/core_cm0.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 612:Drivers/CMSIS/Include/core_cm0.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 613:Drivers/CMSIS/Include/core_cm0.h **** 
 614:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_SetPriorityGrouping(X) (void)(X)
 615:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_GetPriorityGrouping()  (0U)
 616:Drivers/CMSIS/Include/core_cm0.h **** 
 617:Drivers/CMSIS/Include/core_cm0.h **** /**
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccXucmVD.s 			page 25


 618:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Enable Interrupt
 619:Drivers/CMSIS/Include/core_cm0.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
 620:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 621:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 622:Drivers/CMSIS/Include/core_cm0.h ****  */
 623:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
 476              		.loc 2 623 22 view .LVU136
 477              	.LBB7:
 624:Drivers/CMSIS/Include/core_cm0.h **** {
 625:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 478              		.loc 2 625 3 view .LVU137
 626:Drivers/CMSIS/Include/core_cm0.h ****   {
 627:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 479              		.loc 2 627 5 view .LVU138
 480              		.loc 2 627 20 is_stmt 0 view .LVU139
 481 006e 0F4B     		ldr	r3, .L18+16
 482 0070 2022     		movs	r2, #32
 483 0072 1A60     		str	r2, [r3]
 484              	.LVL14:
 485              		.loc 2 627 20 view .LVU140
 486              	.LBE7:
 487              	.LBE6:
 141:Src/main.c    **** 
 488              		.loc 1 141 3 is_stmt 1 view .LVU141
 489              	.LBB8:
 490              	.LBI8:
 628:Drivers/CMSIS/Include/core_cm0.h ****   }
 629:Drivers/CMSIS/Include/core_cm0.h **** }
 630:Drivers/CMSIS/Include/core_cm0.h **** 
 631:Drivers/CMSIS/Include/core_cm0.h **** 
 632:Drivers/CMSIS/Include/core_cm0.h **** /**
 633:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Interrupt Enable status
 634:Drivers/CMSIS/Include/core_cm0.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
 635:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 636:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt is not enabled.
 637:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt is enabled.
 638:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 639:Drivers/CMSIS/Include/core_cm0.h ****  */
 640:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
 641:Drivers/CMSIS/Include/core_cm0.h **** {
 642:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 643:Drivers/CMSIS/Include/core_cm0.h ****   {
 644:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISER[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 645:Drivers/CMSIS/Include/core_cm0.h ****   }
 646:Drivers/CMSIS/Include/core_cm0.h ****   else
 647:Drivers/CMSIS/Include/core_cm0.h ****   {
 648:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 649:Drivers/CMSIS/Include/core_cm0.h ****   }
 650:Drivers/CMSIS/Include/core_cm0.h **** }
 651:Drivers/CMSIS/Include/core_cm0.h **** 
 652:Drivers/CMSIS/Include/core_cm0.h **** 
 653:Drivers/CMSIS/Include/core_cm0.h **** /**
 654:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Disable Interrupt
 655:Drivers/CMSIS/Include/core_cm0.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
 656:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 657:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 658:Drivers/CMSIS/Include/core_cm0.h ****  */
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccXucmVD.s 			page 26


 659:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
 660:Drivers/CMSIS/Include/core_cm0.h **** {
 661:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 662:Drivers/CMSIS/Include/core_cm0.h ****   {
 663:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 664:Drivers/CMSIS/Include/core_cm0.h ****     __DSB();
 665:Drivers/CMSIS/Include/core_cm0.h ****     __ISB();
 666:Drivers/CMSIS/Include/core_cm0.h ****   }
 667:Drivers/CMSIS/Include/core_cm0.h **** }
 668:Drivers/CMSIS/Include/core_cm0.h **** 
 669:Drivers/CMSIS/Include/core_cm0.h **** 
 670:Drivers/CMSIS/Include/core_cm0.h **** /**
 671:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Pending Interrupt
 672:Drivers/CMSIS/Include/core_cm0.h ****   \details Reads the NVIC pending register and returns the pending bit for the specified device spe
 673:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 674:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt status is not pending.
 675:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt status is pending.
 676:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 677:Drivers/CMSIS/Include/core_cm0.h ****  */
 678:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
 679:Drivers/CMSIS/Include/core_cm0.h **** {
 680:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 681:Drivers/CMSIS/Include/core_cm0.h ****   {
 682:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 683:Drivers/CMSIS/Include/core_cm0.h ****   }
 684:Drivers/CMSIS/Include/core_cm0.h ****   else
 685:Drivers/CMSIS/Include/core_cm0.h ****   {
 686:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 687:Drivers/CMSIS/Include/core_cm0.h ****   }
 688:Drivers/CMSIS/Include/core_cm0.h **** }
 689:Drivers/CMSIS/Include/core_cm0.h **** 
 690:Drivers/CMSIS/Include/core_cm0.h **** 
 691:Drivers/CMSIS/Include/core_cm0.h **** /**
 692:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Pending Interrupt
 693:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
 694:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 695:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 696:Drivers/CMSIS/Include/core_cm0.h ****  */
 697:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
 698:Drivers/CMSIS/Include/core_cm0.h **** {
 699:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 700:Drivers/CMSIS/Include/core_cm0.h ****   {
 701:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 702:Drivers/CMSIS/Include/core_cm0.h ****   }
 703:Drivers/CMSIS/Include/core_cm0.h **** }
 704:Drivers/CMSIS/Include/core_cm0.h **** 
 705:Drivers/CMSIS/Include/core_cm0.h **** 
 706:Drivers/CMSIS/Include/core_cm0.h **** /**
 707:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Clear Pending Interrupt
 708:Drivers/CMSIS/Include/core_cm0.h ****   \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
 709:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 710:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 711:Drivers/CMSIS/Include/core_cm0.h ****  */
 712:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 713:Drivers/CMSIS/Include/core_cm0.h **** {
 714:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 715:Drivers/CMSIS/Include/core_cm0.h ****   {
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccXucmVD.s 			page 27


 716:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 717:Drivers/CMSIS/Include/core_cm0.h ****   }
 718:Drivers/CMSIS/Include/core_cm0.h **** }
 719:Drivers/CMSIS/Include/core_cm0.h **** 
 720:Drivers/CMSIS/Include/core_cm0.h **** 
 721:Drivers/CMSIS/Include/core_cm0.h **** /**
 722:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Interrupt Priority
 723:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the priority of a device specific interrupt or a processor exception.
 724:Drivers/CMSIS/Include/core_cm0.h ****            The interrupt number can be positive to specify a device specific interrupt,
 725:Drivers/CMSIS/Include/core_cm0.h ****            or negative to specify a processor exception.
 726:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 727:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]  priority  Priority to set.
 728:Drivers/CMSIS/Include/core_cm0.h ****   \note    The priority cannot be set for every processor exception.
 729:Drivers/CMSIS/Include/core_cm0.h ****  */
 730:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 491              		.loc 2 730 22 view .LVU142
 492              	.LBB9:
 731:Drivers/CMSIS/Include/core_cm0.h **** {
 732:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 493              		.loc 2 732 3 view .LVU143
 733:Drivers/CMSIS/Include/core_cm0.h ****   {
 734:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
 494              		.loc 2 734 5 view .LVU144
 495              		.loc 2 734 52 is_stmt 0 view .LVU145
 496 0074 C120     		movs	r0, #193
 497 0076 8000     		lsls	r0, r0, #2
 498 0078 1958     		ldr	r1, [r3, r0]
 499              		.loc 2 734 33 view .LVU146
 500 007a 0D4A     		ldr	r2, .L18+20
 501 007c 1140     		ands	r1, r2
 502              		.loc 2 734 102 view .LVU147
 503 007e 8022     		movs	r2, #128
 504 0080 D201     		lsls	r2, r2, #7
 505 0082 0A43     		orrs	r2, r1
 506              		.loc 2 734 30 view .LVU148
 507 0084 1A50     		str	r2, [r3, r0]
 508              	.LVL15:
 509              	.L17:
 510              		.loc 2 734 30 view .LVU149
 511              	.LBE9:
 512              	.LBE8:
 143:Src/main.c    ****   {
 513              		.loc 1 143 3 is_stmt 1 view .LVU150
 146:Src/main.c    ****     //Toggle red LED
 514              		.loc 1 146 5 view .LVU151
 515 0086 FA20     		movs	r0, #250
 516 0088 4000     		lsls	r0, r0, #1
 517 008a FFF7FEFF 		bl	HAL_Delay
 518              	.LVL16:
 148:Src/main.c    ****   }
 519              		.loc 1 148 5 discriminator 1 view .LVU152
 148:Src/main.c    ****   }
 520              		.loc 1 148 10 is_stmt 0 discriminator 1 view .LVU153
 521 008e 044A     		ldr	r2, .L18+4
 522 0090 5369     		ldr	r3, [r2, #20]
 148:Src/main.c    ****   }
 523              		.loc 1 148 16 discriminator 1 view .LVU154
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccXucmVD.s 			page 28


 524 0092 4021     		movs	r1, #64
 525 0094 4B40     		eors	r3, r1
 526 0096 5361     		str	r3, [r2, #20]
 143:Src/main.c    ****   {
 527              		.loc 1 143 9 is_stmt 1 view .LVU155
 528 0098 F5E7     		b	.L17
 529              	.L19:
 530 009a C046     		.align	2
 531              	.L18:
 532 009c 00100240 		.word	1073876992
 533 00a0 00080048 		.word	1207961600
 534 00a4 00040140 		.word	1073808384
 535 00a8 00000140 		.word	1073807360
 536 00ac 00E100E0 		.word	-536813312
 537 00b0 FF00FFFF 		.word	-65281
 538              		.cfi_endproc
 539              	.LFE42:
 541              		.text
 542              	.Letext0:
 543              		.file 3 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f072xb.h"
 544              		.file 4 "/Applications/ArmGNUToolchain/13.2.Rel1/arm-none-eabi/arm-none-eabi/include/machine/_defa
 545              		.file 5 "/Applications/ArmGNUToolchain/13.2.Rel1/arm-none-eabi/arm-none-eabi/include/sys/_stdint.h
 546              		.file 6 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 547              		.file 7 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc.h"
 548              		.file 8 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_cortex.h"
 549              		.file 9 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccXucmVD.s 			page 29


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccXucmVD.s:19     .text.EXTI0_1_IRQHandler:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccXucmVD.s:25     .text.EXTI0_1_IRQHandler:00000000 EXTI0_1_IRQHandler
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccXucmVD.s:63     .text.EXTI0_1_IRQHandler:00000024 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccXucmVD.s:69     .text.init_leds:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccXucmVD.s:75     .text.init_leds:00000000 init_leds
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccXucmVD.s:205    .text.init_leds:0000008c $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccXucmVD.s:220    .text._Error_Handler:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccXucmVD.s:226    .text._Error_Handler:00000000 _Error_Handler
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccXucmVD.s:244    .rodata.SystemClock_Config.str1.4:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccXucmVD.s:249    .text.SystemClock_Config:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccXucmVD.s:255    .text.SystemClock_Config:00000000 SystemClock_Config
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccXucmVD.s:358    .text.SystemClock_Config:0000006c $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccXucmVD.s:363    .text.main:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccXucmVD.s:369    .text.main:00000000 main
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//ccXucmVD.s:532    .text.main:0000009c $d

UNDEFINED SYMBOLS
__aeabi_uidiv
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
HAL_Init
HAL_Delay
